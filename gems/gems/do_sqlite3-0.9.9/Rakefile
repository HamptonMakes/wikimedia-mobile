require 'rubygems'
require 'spec/rake/spectask'
require 'pathname'

ROOT = Pathname(__FILE__).dirname.expand_path

require "lib/do_sqlite3/version"

JRUBY   = (RUBY_PLATFORM =~ /java/) rescue nil
WINDOWS = (RUBY_PLATFORM =~ /mswin|mingw|cygwin/) rescue nil
          # don't use SUDO with JRuby, for the moment, although this behaviour
          # is not entirely correct.
SUDO    = (WINDOWS || JRUBY) ? '' : ('sudo' unless ENV['SUDOLESS'])

AUTHOR = "Bernerd Schaefer"
EMAIL  = "bj.schaefer@gmail.com"
GEM_NAME = "do_sqlite3"
GEM_VERSION = DataObjects::Sqlite3::VERSION
GEM_DEPENDENCIES = [["data_objects", GEM_VERSION]]

# TODO: remove duplicates from here that are already listed in .gitignore
clean = %w(o bundle log a gem dSYM obj pdb lib def exp DS_Store)

unless ENV["WINDOWS"]
  GEM_EXTRAS = { :extensions => %w[ ext/extconf.rb ], :has_rdoc => false }
else
  GEM_EXTRAS = {}
end

GEM_CLEAN = ["**/*.{#{clean.join(",")}}", 'ext/Makefile']

PROJECT_NAME = "dorb"
PROJECT_URL  = "http://rubyforge.org/projects/dorb"
PROJECT_DESCRIPTION = PROJECT_SUMMARY = "A DataObject.rb driver for Sqlite3"

DRIVER = true

if (tasks_dir = ROOT.parent + 'tasks').directory?
  require tasks_dir + 'hoe'

  # use .gitignore to identify files to clean up
  File.read(ROOT.parent + '.gitignore').split(/\s+/).each do |pattern|
    next if pattern.include?('/') && !pattern.gsub!(/\A(?:\.\/)?#{ROOT.basename}(?:\/|\z)/, './')
    GEM_CLEAN.concat(Dir.glob(pattern.include?('/') ? pattern : "**/#{pattern}"))
  end
end

# Installation

task :install => [ :package ] do
  sh %{#{SUDO} gem install --local pkg/#{GEM_NAME}-#{GEM_VERSION} --no-update-sources}, :verbose => false
end

desc "Uninstall #{GEM_NAME} #{GEM_VERSION} (default ruby)"
task :uninstall => [ :clobber ] do
  sh "#{SUDO} gem uninstall #{GEM_NAME} -v#{GEM_VERSION} -I -x", :verbose => false
end

desc 'Run specifications'
Spec::Rake::SpecTask.new(:spec) do |t|
  t.spec_opts << '--format' << 'specdoc' << '--colour'
  t.spec_opts << '--loadby' << 'random'
  t.spec_files = Pathname.glob(ENV['FILES'] || 'spec/**/*_spec.rb')

  begin
    t.rcov = ENV.has_key?('NO_RCOV') ? ENV['NO_RCOV'] != 'true' : true
    t.rcov_opts << '--exclude' << 'spec'
    t.rcov_opts << '--text-summary'
    t.rcov_opts << '--sort' << 'coverage' << '--sort-reverse'
  rescue Exception
    # rcov not installed
  end
end

namespace :ci do

  task :prepare do
    rm_rf ROOT + "ci"
    mkdir_p ROOT + "ci"
    mkdir_p ROOT + "ci/doc"
    mkdir_p ROOT + "ci/cyclomatic"
    mkdir_p ROOT + "ci/token"
  end

  task :publish do
    out = ENV['CC_BUILD_ARTIFACTS'] || "out"
    mkdir_p out unless File.directory? out

    mv "ci/rspec_report.html", "#{out}/rspec_report.html"
    mv "ci/coverage", "#{out}/coverage"
  end

  task :spec => :prepare do
    Rake::Task[:spec].invoke
    mv ROOT + "coverage", ROOT + "ci/coverage"
  end

end

task :ci => ["ci:spec"]


# Windows specific stuff. (for cross-compiling a release)
# You have been warned.
# Thanks to Luis Lavena for helping through the writing of this.
# will eventually be replaced with: http://github.com/luislavena/rake-compiler

# use the do directory for the cross-compile stuff
CCROOT = ROOT.parent

SQLITE_VERSION = '3_6_6_2'

MINGW_PATH = ENV['MINGW_PATH'] || "/usr/i586-mingw32msvc"

if (tasks_dir = ROOT.parent + 'tasks').directory?
  require tasks_dir + 'win32'

  SQLITE_DIR = "#{CROSS}/sqlite-#{SQLITE_VERSION}"

  namespace :build do

    task :externals => "win32:sqlite3"

    namespace :win32 do

      desc "Creates cross compiled sqlite3 libraries"
      task :sqlite3 => ["#{SQLITE_DIR}/include/sqlite3.h", "#{SQLITE_DIR}/lib/libsqlite3.a"]

      directory SQLITE_DIR
      directory "#{SQLITE_DIR}/include"
      directory "#{SQLITE_DIR}/lib"

      file "#{SQLITE_DIR}/include/sqlite3.h" => ["#{SQLITE_DIR}/include", "#{STASH}/sqlite-amalgamation-#{SQLITE_VERSION}.zip"] do |t|
        when_writing "creating sqlite3.h" do
          cd(t.prerequisites[0]) do
            sh "unzip #{t.prerequisites[1]}"
            touch t.name
          end
        end
      end

      file "#{SQLITE_DIR}/lib/libsqlite3.a" => ["#{SQLITE_DIR}/lib", "#{SQLITE_DIR}/sqlite3.dll"] do |t|
        when_writing "creating libsqlite3.a" do
          sh "#{MINGW_PATH}/bin/dlltool --dllname #{SQLITE_DIR}/sqlite3.dll --def #{SQLITE_DIR}/sqlite3.def --output-lib #{t.name}"
        end
      end

      file "#{SQLITE_DIR}/sqlite3.dll" => [SQLITE_DIR, "#{STASH}/sqlitedll-#{SQLITE_VERSION}.zip"] do |t|
        when_writing "creating sqlite3.dll" do
          cd(SQLITE_DIR) do
            sh "unzip #{t.prerequisites[1]}"
            touch t.name
          end
        end
      end

      # download files
      file "#{STASH}/sqlite-amalgamation-#{SQLITE_VERSION}.zip" => STASH do |t|
        download_file(STASH, "http://www.sqlite.org/#{File.basename(t.name)}")
      end

      file "#{STASH}/sqlitedll-#{SQLITE_VERSION}.zip" => STASH do |t|
        download_file(STASH, "http://www.sqlite.org/#{File.basename(t.name)}")
      end

      # The extension.  This is a task so it's rebuilt each time it is run, so we're sure to have a windows
      # compiled extension.
      task "lib/do_sqlite3_ext.so" => [:clean, "build:externals"] + FileList["ext/extconf.rb", "ext/*.c", "ext/*.h"] do
        when_writing "Creating compiled extension" do
          cd('ext') do
            ruby " -I #{CROSS}/lib/ruby/1.8/i386-mingw32/ extconf.rb -- --with-sqlite3-dir=#{SQLITE_DIR}"
            sh 'make'
          end
          mv 'ext/do_sqlite3_ext.so', 'lib'
        end
      end

      task :extension => "lib/do_sqlite3_ext.so"

    end
  end

  namespace :gem do
    namespace :win32 do
      desc "Package pre-compiled win32 gem"
      task :package => "pkg/#{GEM_NAME}-#{GEM_VERSION}-x86-mswin32-60.gem"

      file "pkg/#{GEM_NAME}-#{GEM_VERSION}-x86-mswin32-60.gem" => ["build:win32:extension", "pkg"] + HOE.spec.files do |t|
        spec = HOE.spec.dup
        spec.extensions = nil
        spec.files += Dir['lib/**.so']
        spec.platform = 'x86-mswin32-60'
        spec.post_install_message = <<-eos
Now download http://www.sqlite.org/sqlitedll-#{SQLITE_VERSION}.zip
And place the dll somewhere in your PATH, for example C:\\ruby\\bin
      eos
        when_writing "Building win32 do_sqlite3 gem" do
          Gem::Builder.new(spec).build
        end
        mv File.basename(t.name), t.name
      end
    end
  end
end
